package go2rtc

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"sync"
	"time"

	"gopkg.in/yaml.v3"
)

// Manager —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º go2rtc
type Manager struct {
	cmd        *exec.Cmd
	configPath string
	dataDir    string
	apiURL     string
	rtspPort   int
	webrtcPort int
	apiPort    int
	httpClient *http.Client
	ctx        context.Context
	cancel     context.CancelFunc
	mu         sync.RWMutex
	isRunning  bool
}

// Config –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é go2rtc
type Config struct {
	API struct {
		Listen   string `yaml:"listen"`
		Origin   string `yaml:"origin"`
		BasePath string `yaml:"base_path,omitempty"`
	} `yaml:"api"`
	RTSP struct {
		Listen       string `yaml:"listen"`
		DefaultQuery string `yaml:"default_query"`
	} `yaml:"rtsp"`
	WebRTC struct {
		Listen string `yaml:"listen"`
	} `yaml:"webrtc"`
	Streams map[string]interface{} `yaml:"streams"`
	Log     struct {
		Level string `yaml:"level"`
	} `yaml:"log"`
}

// Stream –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫ –≤ go2rtc
type Stream struct {
	Name     string                 `json:"name"`
	Sources  []string               `json:"sources,omitempty"`
	Channels int                    `json:"channels,omitempty"`
	Codecs   []map[string]string    `json:"codecs,omitempty"`
	Recv     int                    `json:"recv,omitempty"`
	Send     int                    `json:"send,omitempty"`
	Info     map[string]interface{} `json:"info,omitempty"`
}

// StreamInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
type StreamInfo struct {
	Producers []Producer `json:"producers"`
}

// Producer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –ø–æ—Ç–æ–∫–∞
type Producer struct {
	URL    string              `json:"url"`
	Codecs []map[string]string `json:"codecs"`
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä go2rtc
func New(dataDir string) (*Manager, error) {
	ctx, cancel := context.WithCancel(context.Background())

	m := &Manager{
		dataDir:    dataDir,
		configPath: filepath.Join(dataDir, "go2rtc.yaml"),
		apiPort:    1984,
		rtspPort:   8554,
		webrtcPort: 8555,
		apiURL:     "http://127.0.0.1:1984",
		httpClient: &http.Client{
			Timeout: 5 * time.Second, // –£–º–µ–Ω—å—à–∞–µ–º timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
		},
		ctx:    ctx,
		cancel: cancel,
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(dataDir, 0755); err != nil {
		return nil, fmt.Errorf("failed to create data directory: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := m.createConfig(); err != nil {
		return nil, fmt.Errorf("failed to create config: %w", err)
	}

	return m, nil
}

// createConfig —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª go2rtc
func (m *Manager) createConfig() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	if _, err := os.Stat(m.configPath); err == nil {
		// –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
		data, readErr := os.ReadFile(m.configPath)
		if readErr == nil {
			var testConfig Config
			if yamlErr := yaml.Unmarshal(data, &testConfig); yamlErr == nil {
				// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ streams –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
				configStr := string(data)
				if !strings.Contains(configStr, "streams: {}") && !strings.Contains(configStr, "streams:{}") {
					log.Printf("Using existing valid config: %s", m.configPath)
					return nil
				} else {
					log.Printf("Config file has invalid streams format, recreating: %s", m.configPath)
				}
			} else {
				log.Printf("Config file corrupted, recreating: %v", yamlErr)
			}
		}
	}

	log.Printf("Creating new config: %s", m.configPath)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º YAML —Ñ–æ—Ä–º–∞—Ç–æ–º
	configContent := fmt.Sprintf(`api:
  listen: :%d
  origin: '*'

rtsp:
  listen: :%d
  default_query: video&audio

webrtc:
  listen: :%d

streams:

log:
  level: info
`, m.apiPort, m.rtspPort, m.webrtcPort)

	if err := os.WriteFile(m.configPath, []byte(configContent), 0644); err != nil {
		return fmt.Errorf("failed to write config: %w", err)
	}

	log.Printf("Config created successfully")
	return nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å go2rtc
func (m *Manager) Start() error {
	m.mu.Lock()
	defer m.mu.Unlock()

	if m.isRunning {
		return nil
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–æ–º—É —Ñ–∞–π–ª—É go2rtc
	binaryPath, err := m.getBinaryPath()
	if err != nil {
		return fmt.Errorf("failed to get binary path: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º go2rtc —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	m.cmd = exec.CommandContext(m.ctx, binaryPath, "-c", m.configPath)

	// –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø—É—Ç—è–º–∏
	// m.cmd.Dir = m.dataDir

	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –ª–æ–≥–∏
	m.cmd.Stdout = log.Writer()
	m.cmd.Stderr = log.Writer()

	if err := m.cmd.Start(); err != nil {
		return fmt.Errorf("failed to start go2rtc: %w", err)
	}

	m.isRunning = true

	// –ñ–¥–µ–º –ø–æ–∫–∞ go2rtc –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
	if err := m.waitForReady(); err != nil {
		m.Stop()
		return fmt.Errorf("go2rtc failed to start: %w", err)
	}

	log.Printf("go2rtc started successfully on ports: API=%d, RTSP=%d, WebRTC=%d",
		m.apiPort, m.rtspPort, m.webrtcPort)

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å go2rtc
func (m *Manager) Stop() error {
	m.mu.Lock()
	defer m.mu.Unlock()

	if !m.isRunning {
		return nil
	}

	m.cancel()

	if m.cmd != nil && m.cmd.Process != nil {
		// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
		done := make(chan error)
		go func() {
			done <- m.cmd.Wait()
		}()

		select {
		case <-done:
			// –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
		case <-time.After(5 * time.Second):
			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
			m.cmd.Process.Kill()
		}
	}

	m.isRunning = false
	log.Println("go2rtc stopped")

	return nil
}

// Restart –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å go2rtc
func (m *Manager) Restart() error {
	log.Printf("üîÑ Restarting go2rtc process...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
	if err := m.Stop(); err != nil {
		log.Printf("Warning: Failed to stop go2rtc: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
	m.ctx, m.cancel = context.WithCancel(context.Background())

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
	if err := m.Start(); err != nil {
		return fmt.Errorf("failed to restart go2rtc: %w", err)
	}

	log.Printf("‚úÖ Go2rtc restarted successfully")
	return nil
}

// waitForReady –∂–¥–µ—Ç –ø–æ–∫–∞ go2rtc –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
func (m *Manager) waitForReady() error {
	log.Printf("Waiting for go2rtc to become ready...")

	for i := 0; i < 15; i++ { // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥
		resp, err := m.httpClient.Get(m.apiURL + "/api")
		if err == nil {
			resp.Body.Close()
			if resp.StatusCode == http.StatusOK {
				log.Printf("go2rtc is ready after %d seconds", i+1)
				return nil
			}
		}

		if i%5 == 0 && i > 0 {
			log.Printf("Still waiting for go2rtc... (%d/%d seconds)", i, 15)
		}

		time.Sleep(1 * time.Second)
	}

	return fmt.Errorf("timeout waiting for go2rtc to start (waited 15 seconds)")
}

// getBinaryPath –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–æ–º—É —Ñ–∞–π–ª—É go2rtc
func (m *Manager) getBinaryPath() (string, error) {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫
	localPath := filepath.Join(m.dataDir, "bin", "go2rtc")
	if runtime.GOOS == "windows" {
		localPath += ".exe"
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
	if !filepath.IsAbs(localPath) {
		wd, err := os.Getwd()
		if err == nil {
			localPath = filepath.Join(wd, localPath)
		}
	}

	if _, err := os.Stat(localPath); err == nil {
		return localPath, nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PATH
	if path, err := exec.LookPath("go2rtc"); err == nil {
		return path, nil
	}

	// –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å go2rtc
	if err := m.downloadGo2rtc(); err != nil {
		return "", fmt.Errorf("go2rtc not found and failed to download: %w", err)
	}

	return localPath, nil
}

// downloadGo2rtc —Å–∫–∞—á–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é go2rtc
func (m *Manager) downloadGo2rtc() error {
	binDir := filepath.Join(m.dataDir, "bin")
	if err := os.MkdirAll(binDir, 0755); err != nil {
		return fmt.Errorf("failed to create bin directory: %w", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	platform := runtime.GOOS + "_" + runtime.GOARCH

	// URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	downloadURL := fmt.Sprintf("https://github.com/AlexxIT/go2rtc/releases/latest/download/go2rtc_%s", platform)
	if runtime.GOOS == "windows" {
		downloadURL += ".zip"
	}

	log.Printf("Downloading go2rtc from %s", downloadURL)

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	resp, err := http.Get(downloadURL)
	if err != nil {
		return fmt.Errorf("failed to download go2rtc: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to download go2rtc: status %d", resp.StatusCode)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	targetPath := filepath.Join(binDir, "go2rtc")
	if runtime.GOOS == "windows" {
		targetPath += ".exe"
	}

	out, err := os.Create(targetPath)
	if err != nil {
		return fmt.Errorf("failed to create file: %w", err)
	}
	defer out.Close()

	if _, err := io.Copy(out, resp.Body); err != nil {
		return fmt.Errorf("failed to save file: %w", err)
	}

	// –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö
	if runtime.GOOS != "windows" {
		if err := os.Chmod(targetPath, 0755); err != nil {
			return fmt.Errorf("failed to make file executable: %w", err)
		}
	}

	log.Printf("go2rtc downloaded successfully to %s", targetPath)
	return nil
}

// AddStream –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫ –≤ go2rtc
func (m *Manager) AddStream(name string, source string) error {
	if !m.isRunning {
		log.Printf("Cannot add stream %s: go2rtc is not running", name)
		return fmt.Errorf("go2rtc is not running")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
	url := fmt.Sprintf("%s/api/streams?dst=%s&src=%s", m.apiURL, name, source)
	log.Printf("Adding stream %s to go2rtc, URL: %s", name, url)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("PUT", url, nil)
	if err != nil {
		log.Printf("Failed to create PUT request for stream %s: %v", name, err)
		return fmt.Errorf("failed to create request: %w", err)
	}

	log.Printf("Sending PUT request for stream %s", name)
	resp, err := m.httpClient.Do(req)
	if err != nil {
		log.Printf("Failed to execute PUT request for stream %s: %v", name, err)
		return fmt.Errorf("failed to add stream: %w", err)
	}
	defer resp.Body.Close()

	log.Printf("PUT request for stream %s completed with status: %d %s", name, resp.StatusCode, resp.Status)

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	body, readErr := io.ReadAll(resp.Body)
	if readErr != nil {
		log.Printf("Failed to read response body for stream %s: %v", name, readErr)
	}

	if resp.StatusCode != http.StatusOK {
		errorMsg := fmt.Sprintf("go2rtc returned status %d for ADD stream %s", resp.StatusCode, name)
		if len(body) > 0 {
			errorMsg += fmt.Sprintf(", response: %s", string(body))
		}
		log.Printf("Error adding stream %s: %s", name, errorMsg)
		return fmt.Errorf("failed to add stream: %s", errorMsg)
	}

	if len(body) > 0 {
		log.Printf("PUT response for stream %s: %s", name, string(body))
	}

	log.Printf("Stream %s added successfully to go2rtc", name)
	return nil
}

// RemoveStream —É–¥–∞–ª—è–µ—Ç –ø–æ—Ç–æ–∫ –∏–∑ go2rtc
func (m *Manager) RemoveStream(name string) error {
	if !m.isRunning {
		log.Printf("Cannot remove stream %s: go2rtc is not running", name)
		return fmt.Errorf("go2rtc is not running")
	}

	url := fmt.Sprintf("%s/api/streams?src=%s", m.apiURL, name)
	log.Printf("Removing stream %s from go2rtc, URL: %s", name, url)

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
	client := &http.Client{
		Timeout: 15 * time.Second,
	}

	req, err := http.NewRequest("DELETE", url, nil)
	if err != nil {
		log.Printf("Failed to create DELETE request for stream %s: %v", name, err)
		return fmt.Errorf("failed to create request: %w", err)
	}

	log.Printf("Sending DELETE request for stream %s", name)
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Failed to execute DELETE request for stream %s: %v", name, err)
		return fmt.Errorf("failed to remove stream: %w", err)
	}
	defer resp.Body.Close()

	log.Printf("DELETE request for stream %s completed with status: %d %s", name, resp.StatusCode, resp.Status)

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	body, readErr := io.ReadAll(resp.Body)
	if readErr != nil {
		log.Printf("Failed to read response body for stream %s: %v", name, readErr)
	}

	// go2rtc –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 (OK) –∏–ª–∏ 204 (No Content) –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusNoContent {
		errorMsg := fmt.Sprintf("go2rtc returned status %d for DELETE stream %s", resp.StatusCode, name)
		if len(body) > 0 {
			errorMsg += fmt.Sprintf(", response: %s", string(body))
		}
		log.Printf("Error removing stream %s: %s", name, errorMsg)
		return fmt.Errorf("failed to remove stream: %s", errorMsg)
	}

	if len(body) > 0 {
		log.Printf("DELETE response for stream %s: %s", name, string(body))
	}

	log.Printf("Stream %s removed successfully from go2rtc", name)

	// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏ go2rtc
	time.Sleep(100 * time.Millisecond)

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
	if exists, checkErr := m.StreamExists(name); checkErr == nil && exists {
		log.Printf("Warning: Stream %s still exists after DELETE operation", name)
		return fmt.Errorf("stream %s was not properly removed from go2rtc", name)
	} else if checkErr == nil && !exists {
		log.Printf("Confirmed: Stream %s no longer exists in go2rtc", name)
	} else if checkErr != nil {
		log.Printf("Unable to verify stream %s removal: %v", name, checkErr)
	}

	return nil
}

// StreamExists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ go2rtc
func (m *Manager) StreamExists(name string) (bool, error) {
	if !m.isRunning {
		return false, fmt.Errorf("go2rtc is not running")
	}

	streams, err := m.GetStreams()
	if err != nil {
		return false, fmt.Errorf("failed to get streams: %w", err)
	}

	_, exists := streams[name]
	return exists, nil
}

// GetStreams –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
func (m *Manager) GetStreams() (map[string]Stream, error) {
	if !m.isRunning {
		return nil, fmt.Errorf("go2rtc is not running")
	}

	resp, err := m.httpClient.Get(m.apiURL + "/api/streams")
	if err != nil {
		return nil, fmt.Errorf("failed to get streams: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to get streams: status %d", resp.StatusCode)
	}

	var streams map[string]Stream
	if err := json.NewDecoder(resp.Body).Decode(&streams); err != nil {
		return nil, fmt.Errorf("failed to decode streams: %w", err)
	}

	return streams, nil
}

// GetStreamInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
func (m *Manager) GetStreamInfo(name string) (*StreamInfo, error) {
	if !m.isRunning {
		return nil, fmt.Errorf("go2rtc is not running")
	}

	url := fmt.Sprintf("%s/api/streams?src=%s", m.apiURL, name)

	resp, err := m.httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to get stream info: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("stream not found")
	}

	var info StreamInfo
	if err := json.NewDecoder(resp.Body).Decode(&info); err != nil {
		return nil, fmt.Errorf("failed to decode stream info: %w", err)
	}

	return &info, nil
}

// GetStreamURL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ç–æ–∫—É
func (m *Manager) GetStreamURL(name string, protocol string) string {
	switch strings.ToLower(protocol) {
	case "rtsp":
		return fmt.Sprintf("rtsp://127.0.0.1:%d/%s", m.rtspPort, name)
	case "webrtc":
		return fmt.Sprintf("http://127.0.0.1:%d/stream/%s", m.apiPort, name)
	case "mse", "mp4":
		return fmt.Sprintf("http://127.0.0.1:%d/api/stream.mp4?src=%s", m.apiPort, name)
	case "hls":
		return fmt.Sprintf("http://127.0.0.1:%d/api/stream.m3u8?src=%s", m.apiPort, name)
	case "mjpeg":
		return fmt.Sprintf("http://127.0.0.1:%d/api/stream.mjpeg?src=%s", m.apiPort, name)
	default:
		return fmt.Sprintf("http://127.0.0.1:%d/stream/%s", m.apiPort, name)
	}
}

// TestStream –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞
func (m *Manager) TestStream(source string) error {
	if !m.isRunning {
		return fmt.Errorf("go2rtc is not running")
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	testName := fmt.Sprintf("test_%d", time.Now().Unix())

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫
	if err := m.AddStream(testName, source); err != nil {
		return fmt.Errorf("failed to add test stream: %w", err)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–±–æ–ª—å—à–µ –¥–ª—è TRASSIR)
	time.Sleep(5 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
	info, err := m.GetStreamInfo(testName)
	if err != nil {
		m.RemoveStream(testName)
		return fmt.Errorf("failed to get stream info: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
	m.RemoveStream(testName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—ã
	if len(info.Producers) == 0 {
		return fmt.Errorf("no producers found")
	}

	return nil
}

// SaveConfig —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func (m *Manager) SaveConfig() error {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	data, err := os.ReadFile(m.configPath)
	if err != nil {
		return fmt.Errorf("failed to read config: %w", err)
	}

	var config Config
	if err := yaml.Unmarshal(data, &config); err != nil {
		return fmt.Errorf("failed to parse config: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ—Ç–æ–∫–∏
	streams, err := m.GetStreams()
	if err != nil {
		return fmt.Errorf("failed to get streams: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ YAML —Ñ–æ—Ä–º–∞—Ç–∞
	configContent := fmt.Sprintf(`api:
  listen: %s
  origin: '%s'

rtsp:
  listen: %s
  default_query: %s

webrtc:
  listen: %s

streams:
`, config.API.Listen, config.API.Origin, config.RTSP.Listen, config.RTSP.DefaultQuery, config.WebRTC.Listen)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º YAML —Ñ–æ—Ä–º–∞—Ç–µ
	for name, stream := range streams {
		if len(stream.Sources) > 0 {
			configContent += fmt.Sprintf("  %s: %s\n", name, stream.Sources[0])
		}
	}

	configContent += fmt.Sprintf(`
log:
  level: %s
`, config.Log.Level)

	if err := os.WriteFile(m.configPath, []byte(configContent), 0644); err != nil {
		return fmt.Errorf("failed to write config: %w", err)
	}

	log.Printf("Configuration saved successfully")
	return nil
}

// ProbeStream –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
func (m *Manager) ProbeStream(source string) (map[string]interface{}, error) {
	if !m.isRunning {
		return nil, fmt.Errorf("go2rtc is not running")
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API probe endpoint
	url := fmt.Sprintf("%s/api/streams?src=%s&video=all&audio=all&microphone", m.apiURL, source)

	resp, err := m.httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to probe stream: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("failed to probe stream (status %d): %s", resp.StatusCode, string(body))
	}

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode probe result: %w", err)
	}

	return result, nil
}

// TestStreamDirect –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ
func (m *Manager) TestStreamDirect(source string) error {
	if !m.isRunning {
		return fmt.Errorf("go2rtc is not running")
	}

	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
	testName := fmt.Sprintf("test_quick_%d_%d", time.Now().Unix(), time.Now().Nanosecond())

	log.Printf("Testing stream: %s", source)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
	if err := m.AddStream(testName, source); err != nil {
		return fmt.Errorf("failed to add test stream: %w", err)
	}

	log.Printf("Stream %s added successfully", testName)

	// –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤ defer –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
	defer func() {
		if removeErr := m.RemoveStream(testName); removeErr != nil {
			log.Printf("Warning: failed to remove test stream %s: %v", testName, removeErr)
		} else {
			log.Printf("Stream %s removed successfully", testName)
		}
	}()

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(1 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤ - –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º GetStreamInfo
	streams, err := m.GetStreams()
	if err != nil {
		return fmt.Errorf("failed to get streams list: %w", err)
	}

	stream, exists := streams[testName]
	if !exists {
		return fmt.Errorf("stream was not added to streams list")
	}

	// –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏ –∏–º–µ–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —É—Å–ø–µ—à–Ω—ã–º
	if len(stream.Sources) > 0 {
		log.Printf("  ‚úÖ Success: stream has %d sources", len(stream.Sources))
		return nil
	}

	// –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
	info, infoErr := m.GetStreamInfo(testName)
	if infoErr == nil && len(info.Producers) > 0 {
		log.Printf("  ‚úÖ Success: stream has %d producers", len(info.Producers))
		return nil
	}

	// –î–∞–∂–µ –µ—Å–ª–∏ GetStreamInfo –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–æ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ - —ç—Ç–æ —É—Å–ø–µ—Ö
	// go2rtc –º–æ–∂–µ—Ç –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫
	log.Printf("  ‚úÖ Success: stream added to go2rtc (initializing...)")
	return nil
}
