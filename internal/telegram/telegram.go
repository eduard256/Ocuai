package telegram

import (
	"fmt"
	"log"
	"strings"
	"sync"
	"time"

	"ocuai/internal/config"
	"ocuai/internal/events"
	"ocuai/internal/storage"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞
type Bot struct {
	api          *tgbotapi.BotAPI
	config       config.TelegramConfig
	eventManager *events.Manager
	stopChan     chan struct{}
	wg           sync.WaitGroup
	allowedUsers map[int64]bool
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Telegram –±–æ—Ç
func New(cfg config.TelegramConfig, eventManager *events.Manager) (*Bot, error) {
	if cfg.Token == "" {
		return nil, fmt.Errorf("telegram token is empty")
	}

	api, err := tgbotapi.NewBotAPI(cfg.Token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
	allowedUsers := make(map[int64]bool)
	for _, userID := range cfg.AllowedUsers {
		allowedUsers[userID] = true
	}

	bot := &Bot{
		api:          api,
		config:       cfg,
		eventManager: eventManager,
		stopChan:     make(chan struct{}),
		allowedUsers: allowedUsers,
	}

	log.Printf("Telegram bot authorized: @%s", api.Self.UserName)
	return bot, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() {
	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
	b.eventManager.Subscribe(events.EventTypeMotion, b.handleMotionEvent)
	b.eventManager.Subscribe(events.EventTypeAI, b.handleAIEvent)
	b.eventManager.Subscribe(events.EventTypeCameraLost, b.handleCameraLostEvent)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
	b.wg.Add(1)
	go b.handleUpdates()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
	b.wg.Add(1)
	go b.processUnsentEvents()

	log.Println("Telegram bot started")
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Stop() {
	close(b.stopChan)
	b.wg.Wait()
	log.Println("Telegram bot stopped")
}

// handleUpdates –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleUpdates() {
	defer b.wg.Done()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case update := <-updates:
			if update.Message != nil {
				b.handleMessage(update.Message)
			} else if update.CallbackQuery != nil {
				b.handleCallbackQuery(update.CallbackQuery)
			}
		case <-b.stopChan:
			b.api.StopReceivingUpdates()
			return
		}
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if !b.allowedUsers[userID] {
		b.sendMessage(userID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
		log.Printf("Unauthorized access attempt from user %d (@%s)", userID, message.From.UserName)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
	log.Printf("Command from user %d (@%s): %s", userID, message.From.UserName, message.Text)

	switch {
	case strings.HasPrefix(message.Text, "/start"):
		b.handleStartCommand(userID)
	case strings.HasPrefix(message.Text, "/status"):
		b.handleStatusCommand(userID)
	case strings.HasPrefix(message.Text, "/cameras"):
		b.handleCamerasCommand(userID)
	case strings.HasPrefix(message.Text, "/events"):
		b.handleEventsCommand(userID, message.Text)
	case strings.HasPrefix(message.Text, "/ai"):
		b.handleAICommand(userID, message.Text)
	case strings.HasPrefix(message.Text, "/help"):
		b.handleHelpCommand(userID)
	default:
		b.sendMessage(userID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–æ–∫
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID

	if !b.allowedUsers[userID] {
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	callback := tgbotapi.NewCallback(query.ID, "")
	b.api.Request(callback)

	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		return
	}

	action := parts[0]
	param := parts[1]

	switch action {
	case "toggle_ai":
		b.handleToggleAI(userID, param == "enable")
	case "camera_details":
		b.handleCameraDetails(userID, param)
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(userID int64) {
	message := `üè† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ocuai!*

–°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å –ò–ò –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/cameras - —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä
/events - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
/ai - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò
/help - —Å–ø—Ä–∞–≤–∫–∞`

	b.sendMessage(userID, message)
}

// handleStatusCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (b *Bot) handleStatusCommand(userID int64) {
	stats, err := b.eventManager.GetSystemStats()
	if err != nil {
		b.sendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: "+err.Error())
		return
	}

	message := fmt.Sprintf(`üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

üé• –ö–∞–º–µ—Ä—ã: %d (–æ–Ω–ª–∞–π–Ω: %d)
üìÖ –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è: %d
üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: %d
üïí –í—Ä–µ–º—è: %s`,
		stats["cameras_total"],
		stats["cameras_online"],
		stats["events_today"],
		stats["events_total"],
		time.Now().Format("15:04:05 02.01.2006"))

	// –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üé• –ö–∞–º–µ—Ä—ã", "cameras"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –°–æ–±—ã—Ç–∏—è", "events"),
		),
	)

	msg := tgbotapi.NewMessage(userID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// handleCamerasCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cameras
func (b *Bot) handleCamerasCommand(userID int64) {
	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–º–µ—Ä—ã –∏–∑ storage, –Ω–æ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
	message := `üé• *–ö–∞–º–µ—Ä—ã —Å–∏—Å—Ç–µ–º—ã*

1. üìπ –í—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å - üü¢ –û–Ω–ª–∞–π–Ω
2. üìπ –î–≤–æ—Ä - üü¢ –û–Ω–ª–∞–π–Ω
3. üìπ –ì–∞—Ä–∞–∂ - üî¥ –û—Ñ–ª–∞–π–Ω

–î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è: ‚úÖ
–ò–ò –¥–µ—Ç–µ–∫—Ü–∏—è: ‚úÖ`

	b.sendMessage(userID, message)
}

// handleEventsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /events
func (b *Bot) handleEventsCommand(userID int64, text string) {
	events, err := b.eventManager.GetRecentEvents(5)
	if err != nil {
		b.sendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: "+err.Error())
		return
	}

	if len(events) == 0 {
		b.sendMessage(userID, "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è*\n\n–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
		return
	}

	message := "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è*\n\n"
	for _, event := range events {
		icon := "üì±"
		switch event.Type {
		case "motion":
			icon = "üèÉ"
		case "ai_detection":
			icon = "ü§ñ"
		case "camera_lost":
			icon = "üìµ"
		}

		message += fmt.Sprintf("%s *%s*\nüìπ %s\nüïí %s\n\n",
			icon,
			event.Description,
			event.CameraName,
			event.CreatedAt.Format("15:04 02.01.2006"))
	}

	b.sendMessage(userID, message)
}

// handleAICommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò
func (b *Bot) handleAICommand(userID int64, text string) {
	parts := strings.Fields(text)
	if len(parts) < 2 {
		message := `ü§ñ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò*

/ai status - —Å—Ç–∞—Ç—É—Å –ò–ò
/ai enable - –≤–∫–ª—é—á–∏—Ç—å –ò–ò
/ai disable - –≤—ã–∫–ª—é—á–∏—Ç—å –ò–ò`
		b.sendMessage(userID, message)
		return
	}

	command := parts[1]
	switch command {
	case "status":
		// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
		message := `ü§ñ *–°—Ç–∞—Ç—É—Å –ò–ò*

–°–æ—Å—Ç–æ—è–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω
–ú–æ–¥–µ–ª—å: YOLOv8n
–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏: 0.5
–ö–ª–∞—Å—Å—ã: person, car, dog, cat`
		b.sendMessage(userID, message)

	case "enable":
		// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å AI
		b.sendMessage(userID, "‚úÖ –ò–ò –¥–µ—Ç–µ–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")

	case "disable":
		// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å AI
		b.sendMessage(userID, "‚ùå –ò–ò –¥–µ—Ç–µ–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞")
	}
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelpCommand(userID int64) {
	message := `üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

üè† */start* - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
üìä */status* - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
üé• */cameras* - —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä
üìã */events* [N] - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–±—ã—Ç–∏–π
ü§ñ */ai* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò
‚ùì */help* - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ üèÉ –î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
‚Ä¢ ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ò–ò
‚Ä¢ üìµ –ü–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –∫–∞–º–µ—Ä–æ–π

*–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:* %s`

	msg := fmt.Sprintf(message, b.config.NotificationHours)
	b.sendMessage(userID, msg)
}

// handleToggleAI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–ò
func (b *Bot) handleToggleAI(userID int64, enable bool) {
	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å AI –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
	status := map[bool]string{true: "–≤–∫–ª—é—á–µ–Ω–∞", false: "–≤—ã–∫–ª—é—á–µ–Ω–∞"}
	icon := map[bool]string{true: "‚úÖ", false: "‚ùå"}
	b.sendMessage(userID, fmt.Sprintf("%s –ò–ò –¥–µ—Ç–µ–∫—Ü–∏—è %s", icon[enable], status[enable]))
}

// handleCameraDetails –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–∞–º–µ—Ä—ã
func (b *Bot) handleCameraDetails(userID int64, cameraID string) {
	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞–º–µ—Ä—ã
	message := fmt.Sprintf(`üé• *–ö–∞–º–µ—Ä–∞: %s*

–°—Ç–∞—Ç—É—Å: üü¢ –û–Ω–ª–∞–π–Ω
–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 30 —Å–µ–∫ –Ω–∞–∑–∞–¥
–î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è: ‚úÖ
–ò–ò –¥–µ—Ç–µ–∫—Ü–∏—è: ‚úÖ`, cameraID)

	b.sendMessage(userID, message)
}

// Event handlers

// handleMotionEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
func (b *Bot) handleMotionEvent(event events.Event) {
	if !b.isNotificationTimeAllowed() {
		return
	}

	message := fmt.Sprintf(`üèÉ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ*

üé• –ö–∞–º–µ—Ä–∞: %s
üïí –í—Ä–µ–º—è: %s`,
		event.CameraName,
		event.Timestamp.Format("15:04:05 02.01.2006"))

	b.broadcastMessage(message)
}

// handleAIEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ò–ò –¥–µ—Ç–µ–∫—Ü–∏–∏
func (b *Bot) handleAIEvent(event events.Event) {
	if !b.isNotificationTimeAllowed() {
		return
	}

	confidence := ""
	if event.Confidence > 0 {
		confidence = fmt.Sprintf(" (%.0f%%)", event.Confidence*100)
	}

	message := fmt.Sprintf(`ü§ñ *–ò–ò –î–µ—Ç–µ–∫—Ü–∏—è*

üìù %s%s
üé• –ö–∞–º–µ—Ä–∞: %s
üïí –í—Ä–µ–º—è: %s`,
		event.Description,
		confidence,
		event.CameraName,
		event.Timestamp.Format("15:04:05 02.01.2006"))

	b.broadcastMessage(message)
}

// handleCameraLostEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ—Ç–µ—Ä–∏ –∫–∞–º–µ—Ä—ã
func (b *Bot) handleCameraLostEvent(event events.Event) {
	message := fmt.Sprintf(`üìµ *–ü–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –∫–∞–º–µ—Ä–æ–π*

üé• –ö–∞–º–µ—Ä–∞: %s
üïí –í—Ä–µ–º—è: %s

‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã`,
		event.CameraName,
		event.Timestamp.Format("15:04:05 02.01.2006"))

	b.broadcastMessage(message)
}

// processUnsentEvents –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
func (b *Bot) processUnsentEvents() {
	defer b.wg.Done()

	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			events, err := b.eventManager.GetUnprocessedEvents()
			if err != nil {
				log.Printf("Failed to get unprocessed events: %v", err)
				continue
			}

			for _, event := range events {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
				b.sendEventNotification(storage.Event(event))

				// –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
				if err := b.eventManager.MarkEventProcessed(event.ID); err != nil {
					log.Printf("Failed to mark event as processed: %v", err)
				}
			}

		case <-b.stopChan:
			return
		}
	}
}

// sendEventNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏
func (b *Bot) sendEventNotification(event storage.Event) {
	if !b.isNotificationTimeAllowed() {
		return
	}

	icon := "üì±"
	switch event.Type {
	case "motion":
		icon = "üèÉ"
	case "ai_detection":
		icon = "ü§ñ"
	case "camera_lost":
		icon = "üìµ"
	}

	message := fmt.Sprintf(`%s *%s*

üé• –ö–∞–º–µ—Ä–∞: %s
üïí –í—Ä–µ–º—è: %s`,
		icon,
		event.Description,
		event.CameraName,
		event.CreatedAt.Format("15:04:05 02.01.2006"))

	b.broadcastMessage(message)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) sendMessage(userID int64, text string) {
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "Markdown"

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("Failed to send message to user %d: %v", userID, err)
	}
}

// broadcastMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (b *Bot) broadcastMessage(text string) {
	for userID := range b.allowedUsers {
		b.sendMessage(userID, text)
	}
}

// sendVideo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) SendVideo(userID int64, videoPath, caption string) error {
	video := tgbotapi.NewVideo(userID, tgbotapi.FilePath(videoPath))
	video.Caption = caption
	video.ParseMode = "Markdown"

	_, err := b.api.Send(video)
	if err != nil {
		return fmt.Errorf("failed to send video: %w", err)
	}

	return nil
}

// sendPhoto –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) SendPhoto(userID int64, photoPath, caption string) error {
	photo := tgbotapi.NewPhoto(userID, tgbotapi.FilePath(photoPath))
	photo.Caption = caption
	photo.ParseMode = "Markdown"

	_, err := b.api.Send(photo)
	if err != nil {
		return fmt.Errorf("failed to send photo: %w", err)
	}

	return nil
}

// isNotificationTimeAllowed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) isNotificationTimeAllowed() bool {
	if b.config.NotificationHours == "" {
		return true
	}

	parts := strings.Split(b.config.NotificationHours, "-")
	if len(parts) != 2 {
		return true
	}

	startTime, err1 := time.Parse("15:04", strings.TrimSpace(parts[0]))
	endTime, err2 := time.Parse("15:04", strings.TrimSpace(parts[1]))

	if err1 != nil || err2 != nil {
		return true
	}

	now := time.Now()
	currentTime := time.Date(0, 1, 1, now.Hour(), now.Minute(), 0, 0, time.UTC)
	startTime = time.Date(0, 1, 1, startTime.Hour(), startTime.Minute(), 0, 0, time.UTC)
	endTime = time.Date(0, 1, 1, endTime.Hour(), endTime.Minute(), 0, 0, time.UTC)

	if startTime.Before(endTime) {
		return currentTime.After(startTime) && currentTime.Before(endTime)
	} else {
		// –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
		return currentTime.After(startTime) || currentTime.Before(endTime)
	}
}
